<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java SE基础：集合框架</title>
      <link href="JAVA%20SE%E5%9F%BA%E7%A1%80%EF%BC%9A%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>JAVA%20SE%E5%9F%BA%E7%A1%80%EF%BC%9A%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p><code>Java</code>提供的集合框架是高性能的，并且扩展性强。主要包括两种类型的容器，集合<code>Collection</code>和图<code>Map</code>。</p><a id="more"></a><h3 id="Collection—集合"><a href="#Collection—集合" class="headerlink" title="Collection—集合"></a>Collection—集合</h3><p><code>Collection</code>是最基本的集合接口，在<code>Collection</code>中定义了一些通用方法，可用于所有<code>Collection</code>的实现类：</p><ul><li><code>public boolean add(E e)</code>：把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> ：清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>：把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>：判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>：判断当前集合是否为空。</li><li><code>public int size()</code>：返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>：把集合中的元素，存储到数组中。</li></ul><p>它主要有<code>list</code>和<code>set</code>两个子接口。</p><ul><li><code>List</code>：有序集合，存储元素可重复。类比于数组，可动态扩充。常用方法：</li></ul><ul><li><code>public E get(int index)</code>：返回指定位置的元素<ul><li><code>public E remove(int index)</code>：移除指定位置元素并返回</li><li><code>public E set(int index, E element)</code>：指定元素替换，返回替换前的元素。</li></ul></li></ul><p>几个常用的实现类如下：</p><ul><li><p><code>ArrayList</code>：随机访问和遍历性能好，删除和插入效率低。非同步，<strong>多线程不安全</strong>。</p></li><li><p><code>LinkedList</code>：一个双链表。没有同步方法，多线程访问需要自己实现同步。方便元素删除和添加。使用<code>addFirst(E e)</code>和<code>getFirst()</code>方法可以快速操作开头元素。同样的结尾元素也有get和set方法。</p></li><li><p><code>Set</code>：无序集合，存储元素不可重复。检索效率低，删除和插入效率高。几个常用的实现类：</p><ul><li><code>HashSet</code>：根据元素的哈希值来确定元素在集合中的存储位置，性能良好。元素唯一性依赖于<code>hashcode()</code>和<code>equals()</code>方法。存储自定义类型时，需要重写这两个方法。哈希表底层实现：数据+链表+红黑树。</li><li><code>LinkedHashSet</code>：<code>HashSet</code>的继承类，链表+哈希表组合的数据结构，使得存储的元素有了顺序。</li></ul></li></ul><h3 id="Iterator—迭代器"><a href="#Iterator—迭代器" class="headerlink" title="Iterator—迭代器"></a>Iterator—迭代器</h3><p><code>Java</code>针对集合的遍历提供了接口<code>java.util.Iterator</code>。取元素前判断集合是否为空，如果有元素就取出来，直到把所有元素全部取出。常用方法：</p><ul><li><code>public E next()</code>：返回下一个迭代元素。</li><li><code>public boolean hasNext()</code>：如果仍有元素可以迭代，则返回 true。</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设已有存储String的ArrayList变量list</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>foreach</code>也可用于遍历集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类—Collections"><a href="#工具类—Collections" class="headerlink" title="工具类—Collections"></a>工具类—Collections</h3><p><code>Collections</code>是集合工具类，定义了一些针对集合的实用方法。如：</p><ul><li><code>public static &lt;T&gt; boolean addall(Collection&lt;T&gt; c, T... elements)</code>：方便地向集合中添加多个元素。</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>：shuffle英文释义有洗牌的意思，该方法用于打乱集合顺序。</li><li><code>public staic &lt;T&gt; void sort(List&lt;T&gt; list)</code>：按默认规则将集合排序。</li><li><code>public staic &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; )</code>：按指定规则将集合排序。</li></ul><p>自定义<code>Comparator</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按字符串首字母降序排列。</span></span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> o2.charAt(<span class="number">0</span>) - o1.charAt(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>Map</code>是专门用于存储由键值对的集合，它不是<code>Collection</code>的子接口。每个键对应一个值，键不能重复。<code>Map</code>接口的常用方法：</p><ul><li><code>public V put(K key，V value)</code>：把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>：把指定的键所对应的键值对元素在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code>：根据指定的键，在Map集合中获取对应的值。</li><li><code>public Set&lt;K&gt; keySet()</code>：获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取到Map集合中所有的键值对对象的集合。<code>Entry</code>将键值对封装为了对象，这样我们可以先通过<code>entrySet()</code>方法获取到键值对集合，通过得到的<code>Entry</code>对象遍历Map。</li></ul><p>常用子类：</p><ul><li><code>HashMap</code>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的<code>hashCode()</code>方法、<code>equals()</code>方法。</li><li><code>LinkedHashMap</code>：<code>HashMap</code>的子类，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的<code>hashCode()</code>方法、<code>equals()</code>方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
